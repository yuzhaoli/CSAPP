	.pos 0
init:	
	xorl %eax,%eax
	testset 1023(%eax), %ebx
	nop
	iaddl $0, $ebx	#set cond code
	je initiscz
	irmovl $800, %esp  	# Set up Stack pointer
	irmovl $800, %ebp  	# Set up base pointer
	jmp Core1		# Execute main program
initiscz:	
	irmovl $400, %esp  	# Set up Stack pointer
	irmovl $400, %ebp  	# Set up base pointer
	jmp Core0		# Execute main program

# Array of 100 elements
	.align 4
array:	.long 0xd
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xc0
	.long 0xa000
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xc0
	.long 0xa000
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xc0
	.long 0xa000
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xc0
	.long 0xa000
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
	.long 0xb00
MP_len:
	.long 0x0
MP_buf:
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0
	.long 0x0



Core0:





Core1:



Main:	irmovl $4,%eax
	pushl %eax	# Push 4
	irmovl array,%edx
	pushl %edx      # Push array
	call Sum	# Sum(array, 4)
	halt

	# int Sum(int *Start, int Count)
Sum:	pushl %ebp
	rrmovl %esp,%ebp
	mrmovl 8(%ebp),%ecx 	# ecx = Start
	mrmovl 12(%ebp),%edx	# edx = Count
	irmovl $0, %eax		# sum = 0
	andl   %edx,%edx
	je     End
Loop:	mrmovl (%ecx),%esi   # get *Start
	addl %esi,%eax       # add to sum
	iaddl  $4,%ecx       # Sum++
        iaddl  $-1,%edx      # Count--
	jne    Loop          # Stop when 0
End:	popl %ebp
	ret
/* $end code-ysa */
/* $end code-yso */
